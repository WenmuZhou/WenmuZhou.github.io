<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[京东2017实习生笔试题-终结者C]]></title>
      <url>/2017/04/08/%E4%BA%AC%E4%B8%9C2017%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%AC%94%E8%AF%95%E9%A2%98-%E7%BB%88%E7%BB%93%E8%80%85C/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>收到情报，有批新造的机器人要运输到前线。小C将去破坏机器人的运输。小C将激光炮放置在公路的一旁，等运输车经过的时候发射（假设激光炮一定可以射穿车辆）。由于能源有限，激光炮只能发射两次。可以认为激光炮放在坐标轴的原点处，并向y轴正方向发射。每辆运输车可以看作是一个矩形，起始的x轴坐标为Xi ,所有的车均位于第一象限，长度为Li,速度为1，朝x轴负方向运动。即经过t时间后，该车车头的x坐标为Xi-t，车尾坐标为Xi-t+Li 。只要打中车的任何一个部分就算击中。<br>请你算算，他在哪两个时刻发射，才能摧毁最多的运输车。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1575688-613fa3e0b7252813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="题目描述.png"></p>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><blockquote>
<p>第一行一个正整数 n ( 2≤N≤200 )，表示运输个的数量。<br>接下来n行，每行两个整数X和L(1≤X、L≤109)，表示一辆车的x轴坐标和长度。</p>
</blockquote>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><blockquote>
<p>输出最多可以摧毁的运输车数量。</p>
</blockquote>
<h2 id="输入例子"><a href="#输入例子" class="headerlink" title="输入例子"></a>输入例子</h2><blockquote>
<p>4<br>2 2<br>3 1<br>5 2</p>
</blockquote>
<h2 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h2><blockquote>
<p>4</p>
</blockquote>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>这题基本思想是移动炮台去打车，跟随者一次次提交来理解正确答案的思想吧</p>
<h1 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h1><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>先确定车辆的区间范围，然后在那个区间里面找出第一次开炮能够打到的最大车辆数，将这些车辆从车辆列表里一处，然后再找出一次开炮能够打到的最大车辆数，两次相加即为最大摧毁数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> max_val;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x_vec, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l_vec, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit_vec, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = x_vec[<span class="number">0</span>]+l_vec[<span class="number">0</span>], min = x_vec[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (x_vec[i] + l_vec[i] &gt;= max) &#123;</div><div class="line">            max = x_vec[i] + l_vec[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (x_vec[i] &lt;= min) &#123;</div><div class="line">            min = x_vec[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lena = max - min + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> a[lena];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena; i++) &#123;</div><div class="line">        a[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (visit_vec[j] != <span class="literal">true</span> &amp;&amp; i + min &gt;= x_vec[j] &amp;&amp; i + min &lt;= x_vec[j] + l_vec[j]) &#123;</div><div class="line">                a[i]++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> max_value = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> max_index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lena; k++) &#123;</div><div class="line">        <span class="keyword">if</span> (a[k] &gt;= max_value) &#123;</div><div class="line">            max_value = a[k];</div><div class="line">            max_index = k;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    max_val = max_value;</div><div class="line">    <span class="keyword">return</span> max_index + min;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x_vec, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l_vec, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit_vec;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">        visit_vec.push_back(<span class="literal">false</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> max_index = getMax(x_vec, l_vec, visit_vec, n);</div><div class="line">    <span class="keyword">int</span> sum = max_val;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (max_index &gt;= x_vec[j] &amp;&amp; max_index &lt;= x_vec[j] + l_vec[j]) &#123;</div><div class="line">            visit_vec[j] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getMax(x_vec, l_vec, visit_vec, n);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; max_val + sum &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x_vec;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l_vec;</div><div class="line">    <span class="keyword">int</span> n, x, speed;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; speed;</div><div class="line">        x_vec.push_back(x);</div><div class="line">        l_vec.push_back(speed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func(x_vec, l_vec, n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="http://upload-images.jianshu.io/upload_images/1575688-6f057243b454cac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一次.png"></p>
<h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>可以看到只能通过89%，咋一看思路很有问题，但是求得的是一个局部最优，并不能代表全局最优，所有下面这种情况会通不过。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1575688-33d6a4d924eef5b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一次失败情况.png"></p>
<p>这种情况下，我们的算法只能得到5个，但是最优解是6个</p>
<h1 id="第二次提交"><a href="#第二次提交" class="headerlink" title="第二次提交"></a>第二次提交</h1><h2 id="修改思路"><a href="#修改思路" class="headerlink" title="修改思路"></a>修改思路</h2><blockquote>
<p>枚举所有的两处射击地点。选择摧毁车辆最大数的两处</p>
</blockquote>
<p>修改代码如下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetVisit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;visit_vec, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    visit_vec.push_back(<span class="literal">false</span>);</div><div class="line">    visit_vec.clear();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        visit_vec.push_back(<span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; start_vec, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; end_vec, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> r = end_vec[<span class="number">0</span>], l = start_vec[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (end_vec[i] &gt;= r) &#123;</div><div class="line">            r = end_vec[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (start_vec[i] &lt;= l) &#123;</div><div class="line">            l = start_vec[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit_vec;</div><div class="line">    resetVisit(visit_vec, n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</div><div class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>;</div><div class="line">        resetVisit(visit_vec, n);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (visit_vec[j] != <span class="literal">true</span> &amp;&amp; i &gt;= start_vec[j] &amp;&amp; i &lt;= end_vec[j]) &#123;</div><div class="line">                visit_vec[j] = <span class="literal">true</span>;</div><div class="line">                count1++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= r; k++) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hais_visit;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (visit_vec[j] != <span class="literal">true</span> &amp;&amp; k &gt;= start_vec[j] &amp;&amp; k &lt;= end_vec[j]) &#123;</div><div class="line">                    visit_vec[j] = <span class="literal">true</span>;</div><div class="line">                    hais_visit.push_back(j);</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; hais_visit.size(); ++m) &#123;</div><div class="line">                visit_vec[hais_visit[m]] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            hais_visit.clear();</div><div class="line"></div><div class="line"><span class="comment">//            cout &lt;&lt; "count1:" &lt;&lt; count1 &lt;&lt; " count:" &lt;&lt; count &lt;&lt; endl;</span></div><div class="line">            <span class="keyword">if</span> (count + count1 &gt; sum) &#123;</div><div class="line">                sum = count + count1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; start_vec;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; end_vec;</div><div class="line">    <span class="keyword">int</span> n, x, len;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; len;</div><div class="line">        start_vec.push_back(x);</div><div class="line">        end_vec.push_back(x + len);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func(start_vec, end_vec, n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h2><p><img src="http://upload-images.jianshu.io/upload_images/1575688-e9ca3bce21e67d4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二次.png"></p>
<p>超时了，注意到上面的遍历是按照车辆区间来的，当区间比较大时，时间复杂度会很高，正确思路应该是按照车辆数来遍历</p>
<h1 id="第三次提交"><a href="#第三次提交" class="headerlink" title="第三次提交"></a>第三次提交</h1><h2 id="注意了正确答案快要接近了"><a href="#注意了正确答案快要接近了" class="headerlink" title="注意了正确答案快要接近了"></a>注意了正确答案快要接近了</h2><h2 id="代码思想"><a href="#代码思想" class="headerlink" title="代码思想"></a>代码思想</h2><blockquote>
<p>选取两个车辆作为射击点，当其他车辆的车头在选取的车辆车身区间时，该车辆视为可被摧毁。三次循环解决问题</p>
</blockquote>
<p>修改之后代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; start_vec, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; end_vec, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</div><div class="line">                <span class="keyword">if</span> ((start_vec[k] &gt;= start_vec[i] &amp;&amp; start_vec[k] &lt;= end_vec[i]) ||</div><div class="line">                    (start_vec[k] &gt;= start_vec[j] &amp;&amp; start_vec[k] &lt;= end_vec[j])) &#123;</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (count &gt; sum) &#123;</div><div class="line">                sum = count;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; start_vec;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; end_vec;</div><div class="line">    <span class="keyword">int</span> n, x, len;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; len;</div><div class="line">        start_vec.push_back(x);</div><div class="line">        end_vec.push_back(x + len);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func(start_vec, end_vec, n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><img src="http://upload-images.jianshu.io/upload_images/1575688-cb2c2979fca8ae08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第三次.png"></p>
<p>妈卖批，结果又错了<br>分析一下！！！！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1575688-22738f778f719a02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第三次错误情况.png"></p>
<p>上面这种情况下，代码算出的是4，实际上是3，从图中可以看出很明显的错误</p>
<p>再次修改代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; start_vec, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; end_vec, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</div><div class="line">                <span class="keyword">if</span> ((start_vec[i] &gt;= start_vec[k] &amp;&amp; start_vec[i] &lt;= end_vec[k]) ||</div><div class="line">                    (start_vec[j] &gt;= start_vec[k] &amp;&amp; start_vec[j] &lt;= end_vec[k])) &#123;</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (count &gt; sum) &#123;</div><div class="line">                sum = count;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; start_vec;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; end_vec;</div><div class="line">    <span class="keyword">int</span> n, x, len;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; len;</div><div class="line">        start_vec.push_back(x);</div><div class="line">        end_vec.push_back(x + len);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func(start_vec, end_vec, n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>AC了，哈哈<br><img src="http://upload-images.jianshu.io/upload_images/1575688-1ca519af3c28f6a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过.png"></p>
]]></content>
      
        <categories>
            
            <category> 笔试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017CVTE-C++笔试题-求最大和子序列]]></title>
      <url>/2017/03/26/2017CVTE-C++%E7%AC%94%E8%AF%95%E9%A2%98-%E6%B1%82%E6%9C%80%E5%A4%A7%E5%92%8C%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>输入一个整型数组，数组里有正数也有负数。 数组中连续的一个或多个整数组成一个子数组，每个子数组都有一个和。 求所有子数组的和的最大值。要求时间复杂度为O(n)。 例如输入的数组为1, -2, 3, 10, -4, 7, 2, -5，和最大的子数组为3, 10, -4, 7, 2，</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ary[NUM] = &#123; <span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">-4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-5</span> &#125;;</div><div class="line">	</div><div class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;<span class="comment">//保存最大和</span></div><div class="line">	<span class="keyword">int</span> curSum = <span class="number">0</span>;<span class="comment">//保存当前和</span></div><div class="line">	<span class="keyword">int</span> curStart = <span class="number">0</span>;<span class="comment">//当前和的起始位置</span></div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;<span class="comment">//最大和的起始位置</span></div><div class="line">	<span class="keyword">int</span> end = <span class="number">0</span>;<span class="comment">//最大和的终止位置</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;NUM; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			curSum = max = ary[i];</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (curSum&lt;<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			curSum = <span class="number">0</span>;<span class="comment">//与负数相加，和会减小，所以抛弃以前的和</span></div><div class="line">			curStart = i;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//最大值已经被保存下来，所以请大胆的继续往前加</span></div><div class="line">		curSum += ary[i];</div><div class="line">		<span class="comment">//当前和被保存为最大值，记录下它的起始位置和结束位置</span></div><div class="line">		<span class="keyword">if</span> (curSum&gt;max)</div><div class="line">		&#123;</div><div class="line">			max = curSum;</div><div class="line">			start = curStart;</div><div class="line">			end = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"和最大的子数组为："</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; ary[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"= "</span> &lt;&lt; max;</div><div class="line">	<span class="built_in">cin</span>.get();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="http://upload-images.jianshu.io/upload_images/1575688-1baba445c002f9a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果.png"></p>
]]></content>
      
        <categories>
            
            <category> 笔试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之图的最短路径-Floyd算法]]></title>
      <url>/2017/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-Floyd%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>在带有权值的图中，我们需要找到一点到另外一点所经过的边的权值之和最小，这样的一条边就是最短路径。</p>
</blockquote>
<h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><blockquote>
<p>变量：起始点v0,终点vn,中间点vk<br>如果dis[v0][vn] &gt; dis[v0][vk] + dis[vk][vn],那么久将vk作为从点v0到vn的转折点。</p>
</blockquote>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote>
<p>Floyd算法的本质是二重循环初始化最短路径矩阵dis，三重循环修正dis，时间复杂度为o(nxnxn)。<br>上一章说Dijkstra算法智能计算出特定起始点到其他点的最短路径，时间复杂度为o(n*n)，要求出所有点之间的最短路径，可以在外面套一个循环，这样时间复杂度为o(nxnxn)，就和Floyd算法一样。但是Floyd算法的实现更为巧妙。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyGraph::shortestPathFloyd() &#123;</div><div class="line">    <span class="keyword">int</span> pathMatrix[<span class="keyword">this</span>-&gt;num][<span class="keyword">this</span>-&gt;num];</div><div class="line">    <span class="keyword">int</span> shortPath[<span class="keyword">this</span>-&gt;num][<span class="keyword">this</span>-&gt;num];</div><div class="line"></div><div class="line">    <span class="comment">//初始化矩阵</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;num; ++j) &#123;</div><div class="line">            shortPath[i][j] = <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[i * <span class="keyword">this</span>-&gt;num + j];</div><div class="line">            pathMatrix[i][j] = j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//算法主体</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>-&gt;num; ++k) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;num; ++j) &#123;</div><div class="line">                <span class="keyword">if</span> (shortPath[i][k] + shortPath[k][j] &lt; shortPath[i][j]) &#123;</div><div class="line">                    shortPath[i][j] = shortPath[i][k] + shortPath[k][j];</div><div class="line">                    pathMatrix[i][j] = pathMatrix[i][k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//打印i到j的最短路径值和路径</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;num; ++j) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[i].data &lt;&lt; <span class="string">"--&gt;"</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[j].data &lt;&lt; <span class="string">" value:"</span> &lt;&lt; shortPath[i][j];</div><div class="line"></div><div class="line">            <span class="keyword">int</span> key = pathMatrix[i][j];</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" path:"</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[i].data;</div><div class="line">            <span class="keyword">while</span> (key != j) &#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"--&gt;"</span>&lt;&lt;<span class="keyword">this</span>-&gt;node_array[key].data;</div><div class="line">                key = pathMatrix[key][j];</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"--&gt;"</span>&lt;&lt;<span class="keyword">this</span>-&gt;node_array[j].data&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="所用测试图结构"><a href="#所用测试图结构" class="headerlink" title="所用测试图结构"></a>所用测试图结构</h1><p><img src="http://upload-images.jianshu.io/upload_images/1575688-4171c84728a8e325.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最短路径.jpg"></p>
<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><p><img src="http://upload-images.jianshu.io/upload_images/1575688-17653cfeec16edff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Floyd算法结果.png"></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之图的最短路径-Dijkstra算法]]></title>
      <url>/2017/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-Dijkstra%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>在带有权值的图中，我们需要找到一点到另外一点所经过的边的权值之和最小，这样的一条边就是最短路径。</p>
</blockquote>
<h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><blockquote>
<ol>
<li>从起始点v0出发，找到和v0相连的点，记录下他们之间的距离。选择距离最短的尾节点v1作为下一个起始点，并记录v1最短路径已找到</li>
<li>从v1出发，找到和v1相连的点，记录下他们之间的距离。比较从v0直接到点vk的距离和v0-&gt;v1-&gt;vk的距离，选择较小的一个值记为v0到vk的距离，并记录vk最短路径已找到</li>
<li>重复步骤2，直到所有的点的最短距离均找到</li>
</ol>
</blockquote>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote>
<p>从过程中可以看到Dijkstra算法可以找到起始点到所有点的最短路径，但是如果我只需要起始点到终点Vn的最短距离，是不是可以减低一下时间复杂度呢？<br>事实上，这个问题在“’大话数据结构“中已经有了说明</p>
<blockquote>
<p>Dijkstra算法的时间复杂度为o(nxn)，寻找起始点到特定点的最短距离时间复杂度也是o(nxn)。<br>这就好比你吃了七个包子吃饱了，但是你就开始想，我是不是可以找到一个就能吃饱的包子，很简单，把七个包子做成一个大包子就行了。</p>
</blockquote>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyGraph::shortestPathDijkstra(<span class="keyword">int</span> node_index) &#123;</div><div class="line">    <span class="comment">//用于存储最短路径下标的数组 patharc[w] = 0,表示w的最短顶点为0</span></div><div class="line">    <span class="keyword">int</span> patharc[<span class="keyword">this</span>-&gt;num];</div><div class="line">    <span class="comment">//用于存储到各点最短路径的权值和</span></div><div class="line">    <span class="keyword">int</span> shortPath[<span class="keyword">this</span>-&gt;num];</div><div class="line">    <span class="comment">//final[w] = 1 表示求得顶点到w的最短路径，0表示还未求得</span></div><div class="line">    <span class="keyword">int</span> final[<span class="keyword">this</span>-&gt;num];</div><div class="line"></div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; i++) &#123;</div><div class="line">        <span class="comment">//全部顶点初始化为位置最短路径状态</span></div><div class="line">        final[i] = <span class="number">0</span>;</div><div class="line">        <span class="comment">//和node_index相连的的顶点加上权值</span></div><div class="line">        shortPath[i] = <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[node_index * <span class="keyword">this</span>-&gt;num + i];</div><div class="line">        <span class="comment">//初始化为0</span></div><div class="line">        patharc[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    shortPath[node_index] = <span class="number">0</span>;</div><div class="line">    final[node_index] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> k, min;</div><div class="line">    <span class="comment">//开始主循环，每次求得node_index到某个顶点的最短路径</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;num; ++j) &#123;<span class="comment">//剩余未求得的顶点数，因为第一个点(起始点自身)已经确定，所以从1开始</span></div><div class="line">        min = <span class="keyword">this</span>-&gt;max_value;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; ++i) &#123;</div><div class="line">            <span class="comment">//找到与node_index相距最近的点，下标为k</span></div><div class="line">            <span class="keyword">if</span> (!final[i] &amp;&amp; shortPath[i] &lt; min) &#123;</div><div class="line">                k = i;</div><div class="line">                <span class="comment">//顶点i距node_index更近</span></div><div class="line">                min = shortPath[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置顶点k已访问</span></div><div class="line">        final[k] = <span class="number">1</span>;</div><div class="line">        <span class="comment">//修正当前最短路径及距离</span></div><div class="line">        <span class="comment">//如果点node_index通过点k到于k相连的点s比直接到l近，就更新点node_index到l是距离，并设置到l最近的点为k</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="keyword">this</span>-&gt;num; ++l) &#123;</div><div class="line">            <span class="keyword">if</span> (!final[l] &amp;&amp; (min + <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[k * <span class="keyword">this</span>-&gt;num + l] &lt; shortPath[l])) &#123;</div><div class="line">                shortPath[l] = min + <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[k * <span class="keyword">this</span>-&gt;num + l];</div><div class="line">                patharc[l] = k;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//输出最短路径和值</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; <span class="keyword">this</span>-&gt;num; ++m) &#123;</div><div class="line">        <span class="keyword">int</span> key = m;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[key].data &lt;&lt; <span class="string">"&lt;---"</span>;</div><div class="line">            key = patharc[key];</div><div class="line">        &#125; <span class="keyword">while</span> (key != node_index);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[key].data &lt;&lt; <span class="string">"  value:"</span> &lt;&lt; shortPath[m] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="所用测试图结构"><a href="#所用测试图结构" class="headerlink" title="所用测试图结构"></a>所用测试图结构</h1><p><img src="http://upload-images.jianshu.io/upload_images/1575688-4171c84728a8e325.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最短路径.jpg"></p>
<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><p><img src="http://upload-images.jianshu.io/upload_images/1575688-e8cebc9b8bdc802d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dijkstra结果.png"></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017网易游戏雷火盘古实习生招聘笔试真题-赛马]]></title>
      <url>/2017/03/17/2017%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E9%9B%B7%E7%81%AB%E7%9B%98%E5%8F%A4%E5%AE%9E%E4%B9%A0%E7%94%9F%E6%8B%9B%E8%81%98%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98-%E8%B5%9B%E9%A9%AC/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>在一条无限长的跑道上，有N匹马在不同的位置上出发开始赛马。当开始赛马比赛后，所有的马开始以自己的速度一直匀速前进。每匹马的速度都不一样，且全部是同样的均匀随机分布。在比赛中当某匹马追上了前面的某匹马时，被追上的马就出局。 请问按以上的规则比赛无限长的时间后，赛道上剩余的马匹数量的数学期望是多少 </p>
</blockquote>
<p>输入描述</p>
<blockquote>
<p>每个测试输入包含1个测试用例<br>输入只有一行，一个正整数N<br>1 &lt;= N &lt;= 1000</p>
</blockquote>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><blockquote>
<p>输出一个浮点数，精确到小数点后四位数字，表示剩余马匹数量的数学期望</p>
</blockquote>
<p>输入例子</p>
<blockquote>
<p>1<br>2</p>
</blockquote>
<h2 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h2><blockquote>
<p>1.0000<br>1.5000</p>
</blockquote>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><blockquote>
<p>条件</p>
<ol>
<li>赛道无限长！！！</li>
<li>赛道无限长！！！</li>
<li>赛道无限长！！！<br>重要的事情先说三遍</li>
<li>马被追上就出局</li>
</ol>
<p>马匹的速度不同，所以假设为a1&gt;a2&gt;a3……&gt;an<br>a1一定能活，概率为1<br>a2在a1之后才能活，a2有两种情况:a1之前，a1之后。概率为1/2<br>a2在a1，a2之后才能活，a3有三种情况: a1之前，a1，a2之间，a2之后。概率为1/3<br>…<br>ak在a1….ak-1之后才能活。k种情况，概率为1/k<br>…<br>an在a1….an-1之后才能活。n种情况，概率为1/n<br>即总的期望为1 + 1/2 + 1/3 + …. 1/k + …1/n,归纳得f(n) = f(n-1) + 1/n</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        sum = sum + <span class="number">1.0</span> / i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>, sum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 笔试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017网易游戏雷火盘古实习生招聘笔试真题-推箱子]]></title>
      <url>/2017/03/17/2017%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E9%9B%B7%E7%81%AB%E7%9B%98%E5%8F%A4%E5%AE%9E%E4%B9%A0%E7%94%9F%E6%8B%9B%E8%81%98%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98-%E6%8E%A8%E7%AE%B1%E5%AD%90/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>大家一定玩过“推箱子”这个经典的游戏。具体规则就是在一个N*M的地图上，有1个玩家、1个箱子、1个目的地以及若干障碍，其余是空地。玩家可以往上下左右4个方向移动，但是不能移动出地图或者移动到障碍里去。如果往这个方向移动推到了箱子，箱子也会按这个方向移动一格，当然，箱子也不能被推出地图或推到障碍里。当箱子被推到目的地以后，游戏目标达成。现在告诉你游戏开始是初始的地图布局，请你求出玩家最少需要移动多少步才能够将游戏目标达成。</p>
</blockquote>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><blockquote>
<p>每个测试输入包含1个测试用例<br>第一行输入两个数字N，M表示地图的大小。其中0&lt;N，M&lt;=8。<br>接下来有N行，每行包含M个字符表示该行地图。其中 . 表示空地、X表示玩家、*表示箱子、#表示障碍、@表示目的地。<br>每个地图必定包含1个玩家、1个箱子、1个目的地。</p>
</blockquote>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><blockquote>
<p>输出一个数字表示玩家最少需要移动多少步才能将游戏目标达成。当无论如何达成不了的时候，输出-1。</p>
</blockquote>
<h3 id="输入例子"><a href="#输入例子" class="headerlink" title="输入例子"></a>输入例子</h3><blockquote>
<p>4 4<br>….<br>..*@<br>….<br>.X..<br>6 6<br>…#..<br>……</p>
<p>#*##..<br>..##.#<br>..X…<br>.@#…</p>
</blockquote>
<h2 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h2><blockquote>
<p>3<br>11</p>
</blockquote>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>这题是看了网上的解答才知道是BFS问题，自己一开始用的递归没做出来<br>下面的代码来自 <a href="http://blog.csdn.net/u010009169/article/details/60892521" target="_blank" rel="external">http://blog.csdn.net/u010009169/article/details/60892521</a> [如有侵权，请联系我删除]</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line">4 4</div><div class="line">....</div><div class="line">..*@</div><div class="line">....</div><div class="line">.X..</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> st[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> x, y, bx, by, tx, ty;</div><div class="line"><span class="keyword">int</span> m, n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; mm;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="comment">//cout &lt;&lt;m&lt;&lt;" "&lt;&lt;n&lt;&lt;"-"&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; mm[x][y] != <span class="string">'#'</span>)<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</div><div class="line">    mm = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(n));</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">char</span> t;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">            <span class="keyword">if</span> (t == <span class="string">'X'</span>) &#123;</div><div class="line">                x = i;</div><div class="line">                y = j;</div><div class="line">                <span class="comment">// cout &lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (t == <span class="string">'*'</span>) &#123;</div><div class="line">                bx = i;</div><div class="line">                by = j;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (t == <span class="string">'@'</span>) &#123;</div><div class="line">                tx = i;</div><div class="line">                ty = j;</div><div class="line">            &#125;</div><div class="line">            mm[i][j] = t;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//  record every state of the</span></div><div class="line">    <span class="comment">//左，右，下，上</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; next = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">1</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">0</span>,  <span class="number">1</span>&#125;,&#123;<span class="number">0</span>,  <span class="number">-1</span>&#125;&#125;;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; que;</div><div class="line">    que.push(&#123;x, y, bx, by&#125;);</div><div class="line"></div><div class="line">    st[x][y][bx][by] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!que.empty()) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t = (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;&amp;) que.front();</div><div class="line">        que.pop();</div><div class="line">        x = t[<span class="number">0</span>];</div><div class="line">        y = t[<span class="number">1</span>];</div><div class="line">        bx = t[<span class="number">2</span>];</div><div class="line">        by = t[<span class="number">3</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; next.size(); i++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x + next[i][<span class="number">0</span>], ny = y + next[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> nnx = nx + next[i][<span class="number">0</span>], nny = ny + next[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (valid(nx, ny) &amp;&amp; (nx != bx || ny != by) &amp;&amp; st[nx][ny][bx][by] == <span class="number">0</span>) &#123;</div><div class="line">                st[nx][ny][bx][by] = st[x][y][bx][by] + <span class="number">1</span>;</div><div class="line">                que.push(&#123;nx, ny, bx, by&#125;);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nx == bx &amp;&amp; ny == by &amp;&amp; valid(nnx, nny) &amp;&amp; st[nx][ny][nnx][nny] == <span class="number">0</span>) &#123;</div><div class="line">                st[nx][ny][nnx][nny] = st[x][y][bx][by] + <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (mm[nnx][nny] == <span class="string">'@'</span>) &#123;</div><div class="line">                    <span class="built_in">cout</span> &lt;&lt; st[nx][ny][nnx][nny] - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                que.push(&#123;nx, ny, nnx, nny&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>st[10][10][10][10]是一个思维数组，用来存放当前点到终点已经走过了多少步，例如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">st[x][y][bx][by] = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>程序分为两步走：</p>
<ol>
<li>人还没到箱子处，人走，箱子不动</li>
<li>人到达箱子处，人和箱子一起动</li>
</ol>
<p>表示点 (x,y) 到点 (bx,by)之前已经走过的步数为1。<br>用队列来存储待搜索的点。<br>最坏的情况是搜索完全部的点后不能到达终点， 所以队列不为空时会一直进行下去。<br>每次分四个方向走，所以是一个四层循环。<br>第一个if条件判断的是是否到达了目的地处，第二个if条件第一次执行是到了箱子处，到达之后，人开始推着箱子前进，所有人和箱子始终是一个方向的，就有了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">st[nx][ny][nnx][nny] = st[x][y][bx][by] + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>接下来人就换着方向推箱子去找终点</p>
]]></content>
      
        <categories>
            
            <category> 笔试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017网易游戏雷火盘古实习生招聘笔试真题-最大和]]></title>
      <url>/2017/03/17/2017%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E9%9B%B7%E7%81%AB%E7%9B%98%E5%8F%A4%E5%AE%9E%E4%B9%A0%E7%94%9F%E6%8B%9B%E8%81%98%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98-%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>在一个N*N的数组中寻找所有横，竖，左上到右下，右上到左下，四种方向的直线连续D个数字的和里面最大的值</p>
</blockquote>
<p>输入描述</p>
<blockquote>
<p>每个测试输入包含1个测试用例，第一行包括两个整数 N 和 D :<br>3 &lt;= N &lt;= 100<br>1 &lt;= D &lt;= N<br>接下来有N行，每行N个数字d:<br>0 &lt;= d &lt;= 100</p>
</blockquote>
<h1 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h1><blockquote>
<p>输出一个整数，表示找到的和的最大值</p>
</blockquote>
<p>输入例子</p>
<blockquote>
<p>4 2<br>87 98 79 61<br>10 27 95 70<br>20 64 73 29<br>71 65 15 0</p>
</blockquote>
<h1 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h1><blockquote>
<p>193</p>
</blockquote>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>每个点需要计算八个方向D个数的和，可以用暴力枚举计算，这样会有很多重复计算<br>对于每个点，我只计算，→，↓，↘，↗四个方向的值。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> n, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max_sum = <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> line_heng = <span class="number">0</span>, line_shu = <span class="number">0</span>, you_shang_line = <span class="number">0</span>, you_xia_line = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; d; k++) &#123;</div><div class="line">                <span class="keyword">if</span> (i + d &lt;= n) &#123;</div><div class="line">                    line_shu += <span class="built_in">array</span>[(i + k) * n + j];</div><div class="line">                    <span class="keyword">if</span>(j + d &lt;= n) &#123;</div><div class="line">                        you_xia_line += <span class="built_in">array</span>[(i + k) * n + j + k];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (j + d &lt;= n) &#123;</div><div class="line">                    line_heng += <span class="built_in">array</span>[i * n + j + k];</div><div class="line">                    <span class="keyword">if</span> (i &gt;= d - <span class="number">1</span>) &#123;</div><div class="line">                        you_shang_line += <span class="built_in">array</span>[(i - k) * n + j + k];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            max_sum = max(max_sum, line_shu);</div><div class="line">            max_sum = max(max_sum, line_heng);</div><div class="line">            max_sum = max(max_sum, you_xia_line);</div><div class="line">            max_sum = max(max_sum, you_shang_line);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max_sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, d, a;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; d;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *<span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n * n];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * n; i++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a;</div><div class="line">        <span class="built_in">array</span>[i] = a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; getMax(<span class="built_in">array</span>, n, d) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 笔试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017网易游戏雷火盘古实习生招聘笔试真题-字符串编码]]></title>
      <url>/2017/03/17/2017%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E9%9B%B7%E7%81%AB%E7%9B%98%E5%8F%A4%E5%AE%9E%E4%B9%A0%E7%94%9F%E6%8B%9B%E8%81%98%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>看到了网友一个简洁的代码</p>
<blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">string</span> str;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;str;</div><div class="line">    <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=str.length();i++)&#123;</div><div class="line">        <span class="keyword">if</span>(str[i]==str[i<span class="number">-1</span>])</div><div class="line">            num++;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;str[i<span class="number">-1</span>];</div><div class="line">            num=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>输入描述</p>
<blockquote>
<p>每个测试输入包含1个测试用例<br>每个测试用例输入只有一行字符串，字符串只包括大写英文字母，长度不超过10000。</p>
</blockquote>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><blockquote>
<p>输出编码后的字符串</p>
</blockquote>
<h2 id="输入例子"><a href="#输入例子" class="headerlink" title="输入例子"></a>输入例子</h2><blockquote>
<p>AAAABCCDAA</p>
</blockquote>
<h2 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h2><blockquote>
<p>4A1B2C1D2A</p>
</blockquote>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>仔细审题很容易就过了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">bianMa</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> out = <span class="string">""</span>;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> curent_char = s[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">        <span class="keyword">if</span> (curent_char == s[i]) &#123;</div><div class="line">            count++;</div><div class="line">            <span class="keyword">if</span>(i==s.length()<span class="number">-1</span>)&#123;</div><div class="line">                <span class="built_in">string</span> s1 = to_string(count) + s[i];</div><div class="line">                out += s1;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">string</span> s1 = to_string(count) + s[i<span class="number">-1</span>];</div><div class="line">            out += s1;</div><div class="line">            count = <span class="number">1</span>;</div><div class="line">            curent_char = s[i];</div><div class="line">            <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>)&#123;</div><div class="line">                s1 = to_string(count) + s[i];</div><div class="line">                out += s1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> a = <span class="string">"AAAAAA"</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; bianMa(a) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 笔试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之图的最短生成树-kruskal算法]]></title>
      <url>/2017/03/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E7%94%9F%E6%88%90%E6%A0%91-kruskal%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><blockquote>
<ol>
<li>每次从所有边中选取权值最小的一条边，将首尾节点加入集合T,剩余节点集合为G</li>
<li>从剩余节点组成的所有边中再选择一条权值最小的边，将首尾节点加入集合T,剩余节点集合为G</li>
<li>重复2并且保证已选出的边不构成回路，直到G中没有节点。</li>
</ol>
</blockquote>
<h2 id="和prim的区别"><a href="#和prim的区别" class="headerlink" title="和prim的区别"></a>和prim的区别</h2><p>kruskal的计算是基于边的，在边比较少的情况下会比较快，边比较多时，prim会更好。</p>
<p>例子为<br><img src="http://upload-images.jianshu.io/upload_images/1575688-3141ecc2cc6b1af5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最小生成树.jpg --图来自慕课网视频"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyGraph::kruskalTree() &#123;</div><div class="line">    <span class="comment">//1、将连接矩阵转换为边集合</span></div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="built_in">vector</span>&lt;MyEdge&gt; edge_vector = transformMatrixToEdge();</div><div class="line">    <span class="comment">//用于判断便于边是否形成环路，下标为边的起始点，值为边的结束点</span></div><div class="line">    <span class="keyword">int</span> parent[<span class="keyword">this</span>-&gt;num];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;num;i++)&#123;</div><div class="line">        parent[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; edge_vector.size(); ++j) &#123;</div><div class="line">        n = <span class="keyword">this</span>-&gt;Find(parent,edge_vector[j].start);</div><div class="line">        m = <span class="keyword">this</span>-&gt;Find(parent,edge_vector[j].end);</div><div class="line">        <span class="keyword">if</span>(n!=m)&#123;</div><div class="line">            parent[n] = m;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="keyword">this</span>-&gt;node_array[edge_vector[j].start].data&lt;&lt;<span class="string">"---&gt;"</span>&lt;&lt;<span class="keyword">this</span>-&gt;node_array[edge_vector[j].end].data&lt;&lt;<span class="string">" value: "</span>&lt;&lt;edge_vector[j].value&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;MyEdge&gt; MyGraph::transformMatrixToEdge() &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;MyEdge&gt; edges;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;num; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;<span class="built_in">array</span>[i*<span class="keyword">this</span>-&gt;num+j]!=<span class="keyword">this</span>-&gt;max_value) &#123;</div><div class="line">                MyEdge edge = MyEdge(i,j,<span class="keyword">this</span>-&gt;<span class="built_in">array</span>[i*<span class="keyword">this</span>-&gt;num+j]);</div><div class="line">                edges.push_back(edge);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; edges.size(); ++k) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k+<span class="number">1</span>; i &lt; edges.size(); ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(edges[k].value&gt;edges[i].value)&#123;</div><div class="line">                MyEdge edge = MyEdge(edges[k].start,edges[k].end,edges[k].value);</div><div class="line">                edges[k] = edges[i];</div><div class="line">                edges[i] = edge;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> edges;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> MyGraph::Find(<span class="keyword">int</span> *parent, <span class="keyword">int</span> f) &#123;</div><div class="line">    <span class="keyword">while</span>(parent[f]&gt;<span class="number">0</span>)&#123;</div><div class="line">        f = parent[f];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://upload-images.jianshu.io/upload_images/1575688-e9e644e262f533f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kruskal结果.png"></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之图的遍历-深度优先搜索(DFS)和广度优先搜索(BFS)]]></title>
      <url>/2017/03/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2(DFS)%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2(BFS)/</url>
      <content type="html"><![CDATA[<h1 id="两种遍历"><a href="#两种遍历" class="headerlink" title="两种遍历"></a>两种遍历</h1><p>图的遍历分为深度优先搜索(Depth First Search)和广度优先搜索</p>
<h2 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h2><blockquote>
<p>顺着起始节点的一条边一直找下去，知道这条边上的节点全部被找完，然后再开始顺着另一条边寻找。</p>
</blockquote>
<h2 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h2><blockquote>
<p>选起始节点连接的所有边，然后将这些边的尾节点中没有访问的加入待寻找节点结合T，起始点置为已访问，接着寻找T中每一个点连接的边，并将尾节点加入T，直到T中包含所有的节点并且都已访问。</p>
</blockquote>
<h1 id="例子说明"><a href="#例子说明" class="headerlink" title="例子说明"></a>例子说明</h1><p><img src="http://upload-images.jianshu.io/upload_images/1575688-c9ddbca5b9fafc76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="深度和广度优先搜索.jpg"><br>深度优先搜索结果为：A B C E F D G H<br>广度优先搜索结果为：A B D C F G H E</p>
<p>可以看出深度优先搜索就是先一条路走到底，再去走另外的路<br>广度优先搜索就是一层一层的访问</p>
<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><h2 id="深度优先搜索-DFS-1"><a href="#深度优先搜索-DFS-1" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyGraph::depthFirstTraverse(<span class="keyword">int</span> node_index) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[node_index].data &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="keyword">this</span>-&gt;node_array[node_index].is_visited = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">array</span>[node_index * <span class="keyword">this</span>-&gt;num + i] != <span class="number">65535</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;node_array[i].is_visited) &#123;</div><div class="line">                depthFirstTraverse(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="广度优先搜索-BFS-1"><a href="#广度优先搜索-BFS-1" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h2><p>需要使用两个结合来存储上层访问的节点和下一层待访问的节点，然后递归调用  breadthFirstTraverseIndex()<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyGraph::breadthFirstTraverse(<span class="keyword">int</span> node_index) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[node_index].data &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="comment">//已经访问过的节点就不再访问</span></div><div class="line">    <span class="keyword">this</span>-&gt;node_array[node_index].is_visited = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur;</div><div class="line">    cur.push_back(node_index);</div><div class="line">    <span class="keyword">this</span>-&gt;breadthFirstTraverseIndex(cur);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MyGraph::breadthFirstTraverseIndex(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; previous) &#123;</div><div class="line">    <span class="keyword">if</span> (previous.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; last;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; previous.size(); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;num; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">array</span>[previous[i] * <span class="keyword">this</span>-&gt;num + j] != <span class="number">65535</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;node_array[j].is_visited) &#123;</div><div class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[j].data &lt;&lt; <span class="string">" "</span>;</div><div class="line">                    <span class="comment">//已经访问过的节点就不再访问</span></div><div class="line">                    <span class="keyword">this</span>-&gt;node_array[j].is_visited = <span class="literal">true</span>;</div><div class="line">                    last.push_back(j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>-&gt;breadthFirstTraverseIndex(last);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之图的最短生成树-prim算法]]></title>
      <url>/2017/03/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E7%94%9F%E6%88%90%E6%A0%91-prim%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><blockquote>
<h2 id="最小生成树-Minimum-cost-Spanning-Tree"><a href="#最小生成树-Minimum-cost-Spanning-Tree" class="headerlink" title="最小生成树(Minimum cost Spanning Tree)"></a>最小生成树(Minimum cost Spanning Tree)</h2><p>构造连通图的最小代价生成树称为最小生成树—《大话数据结构》<br>通俗来说就是寻找权值最小的路径集合来连接图中所有的节点。</p>
</blockquote>
<h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><ol>
<li>将起始点(可以是图中的任意节点)加入集合G.</li>
<li>从图中寻找到G最短的路径，加入路径集合T. 并把路径的终点加入集合G.</li>
<li>重复步骤2，知道G中包含所有的点 or T中边数量=点的数量-1.</li>
</ol>
<p>为了实现此算法，我们需要定义几个变量</p>
<ul>
<li><p>保存剩余节点到G的最短距离的集合lowcost</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> lowcost[num]  <span class="comment">//下标为外部的点，值为到G的距离</span></div></pre></td></tr></table></figure>
</li>
<li><p>保存lowcost中每个边连接到G中的哪一个节点的节点集合</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> adjvex[num]  <span class="comment">//下标为外部的点，值为G中的点</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="代码是在大话数据结构的基础上修改的–现在能从任意节点开始"><a href="#代码是在大话数据结构的基础上修改的–现在能从任意节点开始" class="headerlink" title="代码是在大话数据结构的基础上修改的–现在能从任意节点开始"></a>代码是在大话数据结构的基础上修改的–现在能从任意节点开始</h2><p>图的初始化为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;num; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (i == j) &#123;</div><div class="line">                <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[i * num + j] = <span class="number">0</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[i * num + j] = <span class="number">65535</span>;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyGraph::primTree(<span class="keyword">int</span> node_index) &#123;</div><div class="line">    <span class="keyword">int</span> min, i, j, k, MAXVELUE = <span class="number">65535</span>;</div><div class="line">    <span class="comment">//保存最短边的起始点，下标为外部的点，值为当前生成树中的点</span></div><div class="line">    <span class="keyword">int</span> adjvex[<span class="keyword">this</span>-&gt;num];</div><div class="line">    <span class="comment">//保存各顶点到当前最小生成树的距离(权值)，下标为外部的点，值为到当前生成树的距离</span></div><div class="line">    <span class="keyword">int</span> lowcost[<span class="keyword">this</span>-&gt;num];</div><div class="line"></div><div class="line">    <span class="comment">//将和起始点相关的点之间的权值加入,并设置起始点为node_index处的点</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; i++) &#123;</div><div class="line">        lowcost[i] = <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[node_index * num + i];</div><div class="line">        adjvex[i] = node_index;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//循环剩下的点</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;num; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i != node_index) &#123;</div><div class="line">            min = MAXVELUE;</div><div class="line">            j = <span class="number">0</span>;</div><div class="line">            k = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="comment">/* 循环全部顶点 选择最小值*/</span></div><div class="line">            <span class="keyword">while</span> (j &lt; <span class="keyword">this</span>-&gt;num) &#123;</div><div class="line">                <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min) &#123;</div><div class="line">                    <span class="comment">/* 当前权值成为最小值 */</span></div><div class="line">                    min = lowcost[j];</div><div class="line">                    <span class="comment">/* 将当前最小值的下标存入k */</span></div><div class="line">                    k = j;</div><div class="line">                &#125;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"bian: ("</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[adjvex[k]].data &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;node_array[k].data &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="comment">/* 将当前顶点的权值设置为0,表示此顶点已经加入生成树豪华套餐 */</span></div><div class="line">            lowcost[k] = <span class="number">0</span>;</div><div class="line">            <span class="comment">//重新计算剩余点到生成树的距离</span></div><div class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;num; j++) &#123;</div><div class="line">                <span class="comment">/* 如果下标为k顶点各边权值小于此前这些顶点到达生成树的最短距离 */</span></div><div class="line">                <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[k * <span class="keyword">this</span>-&gt;num + j] &lt; lowcost[j]) &#123;</div><div class="line">                    <span class="comment">/* 将较小的权值存入lowcost相应位置 */</span></div><div class="line">                    lowcost[j] = <span class="keyword">this</span>-&gt;<span class="built_in">array</span>[k * <span class="keyword">this</span>-&gt;num + j];</div><div class="line">                    <span class="comment">/* 将当前最短边的起始点置为k */</span></div><div class="line">                    adjvex[j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行例子中的图为"><a href="#运行例子中的图为" class="headerlink" title="运行例子中的图为"></a>运行例子中的图为</h2><p><img src="http://upload-images.jianshu.io/upload_images/1575688-3141ecc2cc6b1af5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最小生成树.jpg --图来自慕课网视频"></p>
<p>以节点B开始，最终输出为<br><img src="http://upload-images.jianshu.io/upload_images/1575688-7f098fa1dde5a9d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prim结果.png"></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
